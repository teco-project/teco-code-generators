name: Generate
on:
  pull_request:
    branches:
      - main

env:
  TECO_BRANCH: codegen-pr-${{ github.event.number }}

jobs:
  create-branch:
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
    strategy:
      matrix:
        repo:
          - teco
          - teco-core
    steps:
      - name: Generate app token for bot
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      - name: Create synced branch
        uses: actions/github-script@v6
        env:
          TECO_REPO: ${{ matrix.repo }}
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const base_ref = context.payload.pull_request.base.ref;
            const owner = context.repo.owner;
            const repo = process.env.TECO_REPO;
            const ref = `refs/heads/${process.env.TECO_BRANCH}`;
            const { data: branches } = await github.rest.repos.listBranches({ owner, repo });
            var sha = branches.find((branch) => branch.name === 'main').commit.sha;
            if (branches.map((branch) => branch.name).includes(base_ref)) {
              sha = branches.find((branch) => branch.name === base_ref).commit.sha;
            } else {
              const title = 'Base branch not found';
              const message = `Base branch "${base_ref}" doesn't exist in repository ${owner}/${repo}. Available branches: ${JSON.stringify(branches.map((branch) => branch.name))}`;
              console.log(`::warning title=${title}::${message}`);
            }
            github.rest.git.createRef({ owner, repo, ref, sha });
      - name: Create branch protection rule
        uses: actions/github-script@v6
        env:
          TECO_REPO: ${{ matrix.repo }}
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: process.env.TECO_REPO,
              branch: process.env.TECO_BRANCH,
              required_status_checks: null,
              enforce_admins: null,
              required_pull_request_reviews: null,
              restrictions: {
                users: [context.payload.pull_request.user.login],
                teams: [],
                apps: ['teco-automation']
              },
              required_linear_history: true,
              allow_force_pushes: true,
              allow_deletions: true
            });
  generate-and-sync:
    runs-on: ubuntu-latest
    if: ${{ success() || github.event.action == 'synchronize' }}
    needs:
      - create-branch
    steps:
      - name: Generate app token for bot
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Install dependency
        run: sudo apt-get install git-filter-repo -y
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: swift build -c release
      - name: Checkout API models
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/teco-api-models
          path: ./models
          ref: refs/tags/current
      - name: Checkout teco-core
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/teco-core
          ref: ${{ env.TECO_BRANCH }}
          path: ./teco-core
          token: ${{ steps.generate-token.outputs.token }}
      - name: Drop bot commits in teco-core
        env:
          BOT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        working-directory: ./teco-core
        run: |
          git filter-repo --refs HEAD --commit-callback '
            import subprocess; import os
            p = subprocess.run(["git", "merge-base", "--is-ancestor", commit.original_id, os.environ["GITHUB_BASE_REF"]])
            if p.returncode != 0 and commit.committer_email.decode() == os.environ["BOT_COMMITTER_EMAIL"]:
              commit.skip()
          '
          git rebase "$GITHUB_BASE_REF" --quiet
      - name: Generate teco-core
        run: |
          swift run -c release --skip-build teco-common-error-generator \
            --error-file ./models/zh-CN/error-codes.json \
            --output ./teco-core/Sources/TecoCore/Errors/TCCommonError.swift
          swift run -c release --skip-build teco-date-wrapper-generator \
            --output-dir './teco-core/Sources/TecoDateHelpers/Property Wrappers'
          swift run -c release --skip-build teco-region-generator \
            --output ./teco-core/Sources/TecoCore/Common/TCRegion.swift
      - name: Checkout teco
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/teco
          ref: ${{ env.TECO_BRANCH }}
          path: ./teco
          token: ${{ steps.generate-token.outputs.token }}
      - name: Drop bot commits in teco
        env:
          BOT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        working-directory: ./teco
        run: |
          git filter-repo --refs HEAD --commit-callback '
            import subprocess; import os
            p = subprocess.run(["git", "merge-base", "--is-ancestor", commit.original_id, os.environ["GITHUB_BASE_REF"]])
            if p.returncode != 0 and commit.committer_email.decode() == os.environ["BOT_COMMITTER_EMAIL"]:
              commit.skip()
          '
          git rebase "$GITHUB_BASE_REF" --quiet
      - name: Generate teco
        run: |
          swift run -c release --skip-build teco-package-generator \
            --model-dir ./models/zh-CN \
            --service-generator .build/release/teco-service-generator \
            --package-dir ./teco
          if ! git diff --exit-code Package.swift
          then
            swift package resolve
          fi
      # TODO: Add and commit to TecoCore.
      # TODO: Add and commit to Teco.
