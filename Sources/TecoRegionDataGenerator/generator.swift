#if compiler(>=6.0)
private import ArgumentParser
private import struct Foundation.URL
private import OrderedCollections
private import SwiftSyntax
private import SwiftSyntaxBuilder
private import TecoCodeGeneratorCommons
#else
import ArgumentParser
@_implementationOnly import OrderedCollections
import SwiftSyntax
import SwiftSyntaxBuilder
import TecoCodeGeneratorCommons
#endif

@main
struct TecoRegionDataGenerator: TecoCodeGenerator {
    static let startingYear = 2023

    @Option(name: .shortAndLong, completion: .file(extensions: ["swift"]), transform: URL.init(fileURLWithPath:))
    fileprivate var output: URL

    @Option(name: .long)
    fileprivate var product: String = "vpc"

    @Flag
    fileprivate var dryRun: Bool = false

    func generate() async throws {
        let client = RegionService()
        defer { try? client.client.syncShutdown() }

        let map = getRegionMap(from: try await client.describeRegions(for: product))
        let intlMap = getRegionMap(from: try await client.with(language: .en_US).describeRegions(for: product))

        let sourceFile = SourceFileSyntax {
            DeclSyntax("""
                // THIS FILE IS AUTOMATICALLY GENERATED by TecoRegionDataGenerator.
                // DO NOT EDIT.
                
                let regions: [Region] = \(buildRegionListExpr(from: intlMap, map))
                """)
        }
        try sourceFile.save(to: self.output)
    }
}
